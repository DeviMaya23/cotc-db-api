// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"lizobly/cotc-db-api/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTravellerService creates a new instance of MockTravellerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTravellerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTravellerService {
	mock := &MockTravellerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTravellerService is an autogenerated mock type for the TravellerService type
type MockTravellerService struct {
	mock.Mock
}

type MockTravellerService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTravellerService) EXPECT() *MockTravellerService_Expecter {
	return &MockTravellerService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockTravellerService
func (_mock *MockTravellerService) Create(ctx context.Context, input domain.CreateTravellerRequest) error {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateTravellerRequest) error); ok {
		r0 = returnFunc(ctx, input)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTravellerService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTravellerService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input domain.CreateTravellerRequest
func (_e *MockTravellerService_Expecter) Create(ctx interface{}, input interface{}) *MockTravellerService_Create_Call {
	return &MockTravellerService_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *MockTravellerService_Create_Call) Run(run func(ctx context.Context, input domain.CreateTravellerRequest)) *MockTravellerService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CreateTravellerRequest
		if args[1] != nil {
			arg1 = args[1].(domain.CreateTravellerRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTravellerService_Create_Call) Return(err error) *MockTravellerService_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTravellerService_Create_Call) RunAndReturn(run func(ctx context.Context, input domain.CreateTravellerRequest) error) *MockTravellerService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockTravellerService
func (_mock *MockTravellerService) Delete(ctx context.Context, id int) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTravellerService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTravellerService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockTravellerService_Expecter) Delete(ctx interface{}, id interface{}) *MockTravellerService_Delete_Call {
	return &MockTravellerService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockTravellerService_Delete_Call) Run(run func(ctx context.Context, id int)) *MockTravellerService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTravellerService_Delete_Call) Return(err error) *MockTravellerService_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTravellerService_Delete_Call) RunAndReturn(run func(ctx context.Context, id int) error) *MockTravellerService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockTravellerService
func (_mock *MockTravellerService) GetByID(ctx context.Context, id int) (domain.Traveller, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Traveller
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (domain.Traveller, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) domain.Traveller); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Traveller)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTravellerService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockTravellerService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockTravellerService_Expecter) GetByID(ctx interface{}, id interface{}) *MockTravellerService_GetByID_Call {
	return &MockTravellerService_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockTravellerService_GetByID_Call) Run(run func(ctx context.Context, id int)) *MockTravellerService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTravellerService_GetByID_Call) Return(res domain.Traveller, err error) *MockTravellerService_GetByID_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockTravellerService_GetByID_Call) RunAndReturn(run func(ctx context.Context, id int) (domain.Traveller, error)) *MockTravellerService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockTravellerService
func (_mock *MockTravellerService) Update(ctx context.Context, input *domain.Traveller) error {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Traveller) error); ok {
		r0 = returnFunc(ctx, input)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTravellerService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTravellerService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - input *domain.Traveller
func (_e *MockTravellerService_Expecter) Update(ctx interface{}, input interface{}) *MockTravellerService_Update_Call {
	return &MockTravellerService_Update_Call{Call: _e.mock.On("Update", ctx, input)}
}

func (_c *MockTravellerService_Update_Call) Run(run func(ctx context.Context, input *domain.Traveller)) *MockTravellerService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Traveller
		if args[1] != nil {
			arg1 = args[1].(*domain.Traveller)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTravellerService_Update_Call) Return(err error) *MockTravellerService_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTravellerService_Update_Call) RunAndReturn(run func(ctx context.Context, input *domain.Traveller) error) *MockTravellerService_Update_Call {
	_c.Call.Return(run)
	return _c
}
